/* Generated by Yosys 0.13 (git sha1 8b1eafc3a, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module and_no_refresh(clk, rstn, a0, a1, b0, b1, r, x0, x1);
  input a0;
  input a1;
  input b0;
  input b1;
  input clk;
  wire cross_a0_b1;
  wire cross_b0_a1;
  wire inner_a0_b0;
  wire inner_a1_b1;
  wire integ_x0;
  wire integ_x1;
  input r;
  wire refresh_a0_b0_r;
  wire refresh_a1_b1_r;
  reg reshare_x0;
  reg reshare_x1;
  reg reshare_x2;
  reg reshare_x3;
  input rstn;
  output x0;
  output x1;
  always @(posedge clk, negedge rstn)
    if (!rstn) reshare_x0 <= 1'h0;
    else reshare_x0 <= refresh_a0_b0_r;
  always @(posedge clk, negedge rstn)
    if (!rstn) reshare_x1 <= 1'h0;
    else reshare_x1 <= cross_a0_b1;
  always @(posedge clk, negedge rstn)
    if (!rstn) reshare_x2 <= 1'h0;
    else reshare_x2 <= cross_b0_a1;
  always @(posedge clk, negedge rstn)
    if (!rstn) reshare_x3 <= 1'h0;
    else reshare_x3 <= refresh_a1_b1_r;
  assign inner_a0_b0 = a0 & b0;
  assign cross_a0_b1 = a0 & b1;
  assign inner_a1_b1 = a1 & b1;
  assign cross_b0_a1 = a1 & b0;
  assign refresh_a0_b0_r = inner_a0_b0 ^ r;
  assign refresh_a1_b1_r = inner_a1_b1 ^ r;
  assign x0 = reshare_x0 ^ reshare_x1;
  assign x1 = reshare_x2 ^ reshare_x3;
  assign integ_x0 = x0;
  assign integ_x1 = x1;
endmodule
